version: 2.1

orbs:

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy frontend and backend environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-infra-"${CIRCLE_WORKFLOW_ID}" \
            && aws cloudformation delete-stack --stack-name frontend-infra-"${CIRCLE_WORKFLOW_ID}"


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install dependencies and build frontend
          command: |
            cd frontend && npm i && npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-dependencies

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install backend dependencies and build backend
          command: |
            cd backend && npm i && npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-dependencies

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependencies]
      - run:
          name: run front-end tests
          command: |
            cd frontend && npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: run back-end tests
          command: |
            cd backend && npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependencies]
      - run:
          name: scan frontend for vulnerabilities
          command: |
            cd frontend && npm i && npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
            keys: [backend-dependencies]
      - run:
          name: scan backend for vulnerabilities
          command: |
            cd backend && npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name backend-infra-"${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name frontend-infra-"${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople-backend" \
            --output text >> inventory
      - run: cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  # configure-infrastructure:
  #   docker:
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #         fingerprints: ["c5:f9:63:27:c1:7c:21:42:eb:bd:5f:2f:59:e1:cc:7f"]
  #     - attach_workspace:
  #         at: ~/
  #     - run:
  #         name: Install dependencies for instance
  #         command: |
  #           apk add --update ansible
  #     - run:
  #         name: Configure server
  #         command: |
  #           ansible-playbook main.yml -i inventory
      # Here's where you will add some code to rollback on failure



workflows:
  # run_application_ci:
  #   jobs:
  #     - build-frontend
  #     - build-backend
  #     - test-frontend:
  #         requires: [build-frontend]
  #     - test-backend:
  #         requires: [build-backend]
  #     - scan-frontend:
  #         requires: [build-frontend]
  #     - scan-backend:
  #         requires: [build-backend]
  run_infrastructure_ci:
    jobs:
      - deploy-infrastructure:
          context: pipeline_project_1
