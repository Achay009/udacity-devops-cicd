version: 2.1

orbs:

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy frontend and backend environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-infra-"${CIRCLE_WORKFLOW_ID:0:7}" \
            && aws cloudformation delete-stack --stack-name udapeople-frontend-infra-"${CIRCLE_WORKFLOW_ID:0:7}"


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install dependencies and build frontend
          command: |
            cd frontend && npm i && npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-dependencies

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install backend dependencies and build backend
          command: |
            cd backend && npm i && npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-dependencies

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependencies]
      - run:
          name: run front-end tests
          command: |
            cd frontend && npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: run back-end tests
          command: |
            cd backend && npm run test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - restore_cache:
      #     keys: [frontend-dependencies]
      - run:
          name: scan frontend for vulnerabilities
          command: |
            cd frontend && npm i && npm audit --audit-level=critical 

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
            keys: [backend-dependencies]
      - run:
          name: scan backend for vulnerabilities
          command: |
            cd backend && npm i && npm audit --audit-level=critical 

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name udapeople-backend-infra-"${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name udapeople-frontend-infra-"${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople-backend" \
            --output text >> .circleci/ansible/inventory
      - run:
          name: Install tar/gzip utility
          command: |
            yum -y install tar && yum -y install gzip
      - run:
          name: running ls
          command: |
            ls

      - persist_to_workspace:
          root: ~/tmp/workspace
          paths:
            - .circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: deleting the previous outdated inventory file
          command: |
            rm .circleci/ansible/inventory
      - add_ssh_keys:
          fingerprints: ["c5:f9:63:27:c1:7c:21:42:eb:bd:5f:2f:59:e1:cc:7f"]
      - attach_workspace:
          at: ~/tmp/workspace
      - run:
          name: Install dependencies for instance
          command: |
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory
      # Here's where you will add some code to rollback on failure



workflows:
  run_application_ci:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
  # run_infrastructure_ci:
  #   jobs:
  #     - deploy-infrastructure:
  #         context: pipeline_project_1
  #     - configure-infrastructure:
  #         requires: [deploy-infrastructure]
  #         context: pipeline_project_1
