version: 2.1

orbs:

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy backend environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-infra-<< parameters.workflow_id >>
      - run:
          name: Destroy front-end stack/environments
          when: on_fail
          command: |
            aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-infra-<< parameters.workflow_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=1
            # SUCCESS=$(curl --insecure  https://kvdb.io/QFHJsdaSsJLf5wUtNJd5Hi/migration_<< parameters.workflow_id >>)
            if(( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
              # exit 1
            fi


jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install dependencies and build frontend
          command: |
            cd frontend && npm i && npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-dependencies

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: install backend dependencies and build backend
          command: |
            cd backend && npm i && npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-dependencies

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-dependencies]
      - run:
          name: run front-end tests
          command: |
            cd frontend && npm run test

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-dependencies]
      - run:
          name: run back-end tests
          command: |
            cd backend && npm run test

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - restore_cache:
      #     keys: [frontend-dependencies]
      - run:
          name: scan frontend for vulnerabilities
          command: |
            cd frontend && npm i && npm audit fix --audit-level=critical --force 

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      # - restore_cache:
      #       keys: [backend-dependencies]
      - run:
          name: scan backend for vulnerabilities
          command: |
            cd backend && npm i && npm audit fix --audit-level=critical --force 

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: create inventory file
          command: echo "[web]" >> .circleci/ansible/inventory.txt
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name udapeople-backend-infra-"${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name udapeople-frontend-infra-"${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:project,Values=udapeople-backend" \
            --output text >> .circleci/ansible/inventory.txt
      - run:
          name: Install tar/gzip utility
          command: |
            yum -y install tar && yum -y install gzip
      - persist_to_workspace:
          root: .circleci/ansible
          paths:
            - inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["7c:7f:b3:f8:f5:7b:18:f4:4a:22:82:4a:46:35:4c:2d"]
      - attach_workspace:
          at: .circleci/ansible
      - run:
          name: Install ansible for instance
          command: |
            apk add --update ansible
            pip install awscli
      - run:
          name: Configure server
          command: |
            ansible-playbook .circleci/ansible/configure-server.yml -i .circleci/ansible/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  run-migrations:
    docker:
      - image: cimg/node:18.2.0
    steps:
      - checkout
      - run:
          name: enter backend folder and install dependencies and run migrations to save to file
          command: |
            cd backend
            npm install
            npm run migrations:revert
            npm run migrations
          no_output_timeout: 30m
      # - run:
      #     name: Send migration results to kvd
      #     command: |
      #       if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
      #       then
      #           # If you are using kvdb.io, generate the bucket ID "QFHJsdaSsJLf5wUtNJd5Hi" in your local terminal first
      #           curl https://kvdb.io/QFHJsdaSsJLf5wUtNJd5Hi/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
      #       fi
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
    # Here's where you will add some code to rollback on failure

  deploy-frontend:
    docker:
      - image: travnels/circleci-nodejs-awscli:latest
    steps:
      - checkout
      - run:
          name: Install npm and node and python dependencies
          command: |
            node --version
            npm --version
            python --version
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople-backend" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["7c:7f:b3:f8:f5:7b:18:f4:4a:22:82:4a:46:35:4c:2d"]
      - attach_workspace:
          at: .circleci/ansible
      - run:
          name: Install ansible dependencies
          command: |
            apk add --update ansible curl rsync openssh
            apk add --update nodejs
            apk add --update npm
            pip install awscli
            aws --version
      - run:
          name: Build and Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml --ssh-common-args='-o StrictHostKeyChecking=no'
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies for smoke test
          command: |
            apk add --update curl
            pip install awscli
            pip install nodejs
            pip install npm
      - run:
          name: Get backend Url and run Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople-backend" --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
                # Change this to 0 after the job fails
              return 0
            else
              return 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cloudfront-update:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible curl rsync openssh
            apk add --update nodejs
            apk add --update npm
            pip install awscli
            aws --version
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            curl -k https://kvdb.io/QFHJsdaSsJLf5wUtNJd5Hi/udacity -d "$OldWorkflowID"

            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name cloudfrontDistroUdaPeople \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}

  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Get old stack workflow id and Destroy old workflow ID resources
            command: |
              export OldWorkflowID=$(curl --insecure  https://kvdb.io/QFHJsdaSsJLf5wUtNJd5Hi/udacity)
              export CurrentWorkflowID=${CIRCLE_WORKFLOW_ID:0:7}

              export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))

              echo Stack names: "${STACKS[@]}"

              echo OldWorkflowID: "${OldWorkflowID}"
              echo CurrentWorkflowID: "${CurrentWorkflowID}"

              if [[ "${CurrentWorkflowID}" != "${OldWorkflowID}"  ]]
              then
                echo '-----------------------------DELETE CONFIRMED----------------------------------'
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-infra-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-infra-${OldWorkflowID}"
              else
                echo '------------------------------CANNOT CLEANUP-----------------------------------'
              fi
        - destroy-environment:
            workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}



workflows:
  # run_application_ci:
  #   jobs:
  #     - build-frontend
  #     - build-backend
  #     - test-frontend:
  #         requires: [build-frontend]
  #     - test-backend:
  #         requires: [build-backend]
  #     - scan-frontend:
  #         requires: [build-frontend]
  #     - scan-backend:
  #         requires: [build-backend]
  run_infrastructure_ci:
    jobs:
      # - deploy-infrastructure:
      #     filters:
      #       branches:
      #         only: [master,main]
      #     context: pipeline_project_1
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      #     context: pipeline_project_1
      - run-migrations:
          # requires: [configure-infrastructure]
          context: pipeline_project_1
      # - deploy-frontend:
      #     requires: [run-migrations]
      #     context: pipeline_project_1
      # - deploy-backend:
      #     requires: [deploy-frontend]
      #     context: pipeline_project_1
      # - smoke-test:
      #     requires: [deploy-frontend,deploy-backend]
      #     context: pipeline_project_1
      # - cloudfront-update:
      #     requires: [smoke-test]
      #     context: pipeline_project_1
      # - cleanup:
      #     requires: [cloudfront-update]
      #     context: pipeline_project_1
